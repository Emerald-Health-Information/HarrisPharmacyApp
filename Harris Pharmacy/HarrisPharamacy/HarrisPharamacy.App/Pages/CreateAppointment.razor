@*
    Harrison1 COSC 470 2019

    File = CreateAppointment.razor

    Author = Christian Slater

    Date = 2019-11-19

    License = MIT

    Modification History

    Version        Author                   Date                    Desc
    v 1.0          Christian Slater         2019-11-19              Refactored Appointments with table
    v 1.1          Taylor Adam              2019-11-19              Renamed
    -->
*@
@page "/CreateAppointment"

@using System.Net
@using System.Security.Claims

@using HarrisPharmacy.Data
@using HarrisPharmacy.Data.Entities.Appointments
@using HarrisPharmacy.Data.Entities.Patients
@using HarrisPharmacy.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Net.Http
@using Newtonsoft.Json
@inject HttpClient Http
@inject IAppointmentService AppointmentService
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager;
@inject IHttpContextAccessor HttpContextAccessor;
@inject IJSRuntime JsRuntime
@if (PatientsList == null)
{
    <p><em>Loading...</em></p>
}
else if (PatientsList.Count == 0 || Users.Count == 0 || AppointmentList.Count == 0)
{
    <p>No patients to display</p>
}
else
{

    <div class="input-group pt-1" data-target-input="nearest">
        <select @bind="@PatientId" class="form-control">
            <option value="">-- Choose Patient --</option>
            @foreach (var patient in PatientsList)
            {
                <option value="@patient.PatientId">@patient.FirstName @patient.LastName</option>
            }
        </select>
    </div>

}

<div class="input-group pb-3 pt-3" data-target-input="nearest">
    <select @bind="@UserId" class="form-control">
        <option value="">-- Choose Front Line Staff --</option>
        @foreach (var user in Users)
        {
            <option value="@user.Id">@user.UserName</option>
        }
    </select>
</div>

<div class="input-group date" id="datetimepicker1" data-target-input="nearest">
    <input type="datetime-local"  class="form-control datetimepicker-input" style="margin-bottom: 1em;" data-target="#datetimepicker1" placeholder="Start Time"/>
    <div class="input-group-append" data-target="#datetimepicker1" data-toggle="datetimepicker" style="margin-bottom: 1em;">
        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
    </div>
</div>
 
<div class="input-group date" id="datetimepicker2" data-target-input="nearest">
    <input type="datetime-local" class="form-control datetimepicker-input" style="margin-bottom: 1em;" data-target="#datetimepicker2" placeholder="End Time" />
    <div class="input-group-append" data-target="#datetimepicker2" data-toggle="datetimepicker" style="margin-bottom: 1em;">
        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
    </div>
</div>

<input class="form-control" @bind="@Location" type="text" placeholder="Location" />

<input class="form-control" @bind="@Description" type="text" placeholder="Description" />

<button @onclick="@CreateAppointmentAsync" class="btn btn-info mt-2" style="float: right;">Create Appointment</button>

@code {
    public List<Patient> PatientsList;
    public Patient PatientSelected;
    public SelectListItem Item { get; set; } = null!;
    public List<Appointment> AppointmentList;
    public List<IdentityUser> Users;

    private string PatientId { get; set; }
    private string UserId { get; set; }
    private DateTime StartTime { get; set; }
    private DateTime EndTime { get; set; }
    private string Location { get; set; }
    private string Description { get; set; }
    private string Delete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = UserManager.Users.AsEnumerable().ToList();
        PatientsList = await AppointmentService.GetPatientsAsync();
        //AppointmentList = await AppointmentService.GetPatientListAsync();
        AppointmentList = await Http.GetJsonAsync<List<Appointment>>("https://harris-api.azurewebsites.net/api/appointments/list");

        await JsRuntime.InvokeVoidAsync("setMinDate");
    }

    /*
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
                await JsRuntime.InvokeVoidAsync("testing");

        }
    */

    /// <summary>
    /// Inserts a new Appointment into the db using appointment service
    /// </summary>
    /// <returns></returns>
    protected async Task CreateAppointmentAsync()
    {
        var startTime = await JsRuntime.InvokeAsync<DateTime>("getStartDate");
        var endTime = await JsRuntime.InvokeAsync<DateTime>("getEndDate");
        startTime = startTime.AddHours(-7);
        endTime = endTime.AddHours(-7);
        Appointment appointment = new Appointment()
        {
            AppointmentId = Guid.NewGuid().ToString(),
            UserId = UserId,
            StartTime = startTime,
            EndTime = endTime,
            PatientId = PatientId,
            Location = Location,
            Description = Description,
        };
        //await AppointmentService.InsertAsync(appointment);
        await Http.PostJsonAsync("https://harris-api.azurewebsites.net/api/appointments/insert", appointment);
        ClearFields();
        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    /// Set end date to start date
    /// </summary>
    /// <returns></returns>
    protected async Task SetEndDateAsync()
    {
        await JsRuntime.InvokeVoidAsync("setEndDate");
    }

    /// <summary>
    /// Delete an Appointment from the db
    /// </summary>
    /// <returns></returns>
    protected async Task DeleteAppointment()
    {
        await AppointmentService.DeleteAsync(Delete);
        ClearFields();
        await OnInitializedAsync();
    }
    protected async void PatientChosen(ChangeEventArgs e)
    {
        PatientSelected = await AppointmentService.GetPatientAsync(e.Value.ToString());
        this.StateHasChanged();
    }
    /// <summary>
    /// Clear fields on the page
    /// </summary>
    protected void ClearFields()
    {
        UserId = string.Empty;
        StartTime = DateTime.Now;
        EndTime = DateTime.Now;
        Location = string.Empty;
        Delete = string.Empty;
        Description = string.Empty;
    }

    /*    protected async void OnStartChange(ChangeEventArgs e)
        {
            StartTime = e.Value.ToString();
            await JsRuntime.InvokeVoidAsync("testing");
        }*/

}