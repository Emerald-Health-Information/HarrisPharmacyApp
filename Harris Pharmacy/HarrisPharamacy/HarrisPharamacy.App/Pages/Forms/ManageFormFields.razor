@*
    Harrison1 COSC 470 2019

    File = ManageFormFields.razor

    Author = TaylorAdam

    Date = 2019-11-19

    License = MIT

    Modification History

    Version		Author			Date				Desc
    v 1.0		Taylor Adam		2019-11-19			Added Headers
    v 1.1		Taylor Adam		2019-11-27			Fixed bugs with the toggleing of the modals. Added the ability to use custom values but it's still a WIP
    -->
*@

@page "/ManageFormFields"

@using HarrisPharmacy.Data.Entities.Forms
@using HarrisPharmacy.Data.Enums
@using HarrisPharmacy.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using Newtonsoft.Json
@inject HttpClient Http

@inject IFormService FormService

@if (FormFieldsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table table-hover'>
        <thead>
            <tr>
                <th>Name</th>
                <th>Input</th>
                <th>Modify</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var field in FormFieldsList)
            {
                <tr>
                    <td>@field.FieldName</td>
                    <td>@field.FormInputType</td>
                    <td>
                        <i @onclick="@(e => RemoveFormField(field.FormFieldId))" class="fas fa-trash-alt hover"></i> |
                        <i @onclick="@(e => OpenUpdateFormField(field.FormFieldId))" class="fas fa-edit hover"></i>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="@OpenCreateField" class="btn btn-info" style="float: right;">Create Field</button>
    @if (_createModal)
    {
        <!--The modal TODO: Move to modal component, make it actually submit the form-->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Create Form Field</h3>
                        <button type="button" class="close" @onclick="@ToggleCreateModal">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <input class="form-control" @bind="@FormField.FieldName" type="text" placeholder="Field Name" />

                            <select @onchange="@FormInputTypeClicked" class="form-control">
                                <option value="">-- Input Type --</option>
                                @foreach (var type in (FormInputType[])Enum.GetValues(typeof(FormInputType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>

                            @*<label class="form-check-label">Does this field require only set values </label>
                                <input class="form-check-input" type="checkbox" @onclick="@ToggleValuesBox" />

                                @if (_showValuesBox)
                                {
                                    <label class="col-form-label">Comma separated list of possible values: </label>
                                    <input class="form-control" type="text" @bind="@FormField.Values" />
                                }*@
                            <input class="form-control" type="text" @bind="@FormField.Description" placeholder="Description" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-info" @onclick="@InsertField">Create Form Field</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (_updateModal)
    {

        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Update Form Field </h3>
                        <button type="button" class="close" @onclick="@ToggleUpdateModal">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <input class="form-control" @bind="@FormField.FieldName" type="text" placeholder="Field Name" />
                            <select @onchange="@FormInputTypeClicked" class="form-control">
                                <option value="@FormInputType">@FormInputType</option>
                                @foreach (var type in (FormInputType[])Enum.GetValues(typeof(FormInputType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                            @*<label class="form-check-label">Does this field require only set values </label>
                                @if (FormField.UseValues)
                                {
                                    <input class="form-check-input" type="checkbox" @onclick="@ToggleValuesBoxClearValues" checked />
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" @onclick="@ToggleValuesBoxClearValues" />
                                }*@

                            @if (_showValuesBox)
                            {
                                <label class="col-form-label">Comma separated list of possible values: </label>
                                <input class="form-control" type="text" @bind="@FormField.Values" />
                            }
                            <input class="form-control" type="text" @bind="@FormField.Description" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-info" @onclick="@UpdateFormField">Update Form Field</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@functions {
    /// <summary>
    /// The list of form fields
    /// </summary>
    public List<FormField> FormFieldsList;
    public FormField FormField = null;
    public FormInputType FormInputType = FormInputType.Text;
    /// <summary>
    /// the private backing field for showing the modal to create a form field
    /// </summary>
    private bool _createModal = false;
    /// <summary>
    /// the private backing field for showing the modal to update a form field
    /// </summary>
    private bool _updateModal = false;

    /// <summary>
    /// the backing field for showing values box
    /// </summary>
    private bool _showValuesBox = false;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    /// Gets the forms from the form services and assigns them to FormsList
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FormFieldsList = await FormService.GetFormFieldsAsync();
    }
    /// <summary>
    /// Toggles the modal on/off
    /// </summary>
    protected void ToggleCreateModal()
    {
        _createModal = !_createModal;

    }/// <summary>
     /// Toggles the modal on/off
     /// </summary>
    protected void ToggleUpdateModal()
    {
        _updateModal = !_updateModal;
    }

    /// <summary>
    /// Creates a new form field and opens the modal
    /// </summary>
    protected void OpenCreateField()
    {
        FormField = new FormField();
        ToggleCreateModal();

    }

    protected void ToggleValuesBoxClearValues()
    {
        if (!_showValuesBox && FormField.UseValues)
        {
            FormField.UseValues = false;
            FormField.Values = null;
        }
        else
        {
            _showValuesBox = !_showValuesBox;
        }
    }

    protected void ToggleValuesBox()
    {
        _showValuesBox = !_showValuesBox;
    }
    /// <summary>
    /// Opens the modal to update the form field
    /// </summary>
    protected async void OpenUpdateFormField(string id)
    {
        FormField = await FormService.GetFormFieldAsync(id);
        if (FormField.UseValues)
            _showValuesBox = true;
        else
            _showValuesBox = false;

        ToggleUpdateModal();
        this.StateHasChanged();
    }

    protected void UpdateFormField()
    {
        if (_showValuesBox)
        {
            FormField.UseValues = true;
            ToggleValuesBox();
        }
        else
        {
            FormField.UseValues = false;
            FormField.Values = null;
        }

        ToggleUpdateModal();

        FormField.FormInputType = FormInputType;
        FormService.UpdateFormFieldAsync(FormField);
    }

    /// <summary>
    /// Inserts the created form field into the database
    /// </summary>
    protected async void InsertField()
    {
        if (FormField.Values != null)
            FormField.UseValues = true;

        if (_showValuesBox)
            ToggleValuesBox();

        FormField.FormInputType = FormInputType;
        ///await FormService.InsertFormFieldAsync(FormField);
        await Http.PostJsonAsync("api/formfield/insert", FormField);
        FormFieldsList.Add(FormField);
        ToggleCreateModal();

        this.StateHasChanged();
    }

    protected async void RemoveFormField(string id)
    {

        if (id == null) return;
        await FormService.DeleteFormFieldAsync(id);
        FormFieldsList.Remove(FormFieldsList.Find(formField => formField.FormFieldId == id));
        this.StateHasChanged();
    }
    /// <summary>
    /// Updates the state when the selected form changes
    /// and assigns the form to FormSelected
    /// </summary>
    /// <param name="e"></param>
    protected void FormInputTypeClicked(ChangeEventArgs e)
    {

        FormInputType = Enum.Parse<FormInputType>(e.Value.ToString());
        this.StateHasChanged();
    }

}