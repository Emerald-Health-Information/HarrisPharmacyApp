@page "/forms"

@using HarrisPharmacy.App.Data.Entities.Forms
@using HarrisPharmacy.App.Data.Interfaces
@using Microsoft.AspNetCore.Components

@inject IFormService FormService

<h1>Forms</h1>

<p>Please select form from the list below</p>

@if (FormsList == null)
{
    <p><em>Loading...</em></p>
}
else if (FormsList.Count == 0)
{
    <p>No forms to display</p>
}
else
{
    <div class="row" style="padding-top:10px">
        <div class="col-md-4">
            <select @onchange="@FormClicked" class="form-control">
                <option value="">-- Select Form --</option>
                @foreach (var form in FormsList)
                {
                    <option value="@form.FormId">@form.Name</option>
                }
            </select>
        </div>
    </div>
    <br />
    @if (FormSelected != null)
    {
        <FormComponent Form="FormSelected" />

    }

}

@code {
    /// <summary>
    /// List of the forms
    /// </summary>
    public List<Form> FormsList;
    /// <summary>
    /// Currently selected form
    /// </summary>
    public Form FormSelected;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    /// Gets the forms from the form services and assigns them to FormsList
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FormsList = await FormService.GetFormsAsync();
    }
    /// <summary>
    /// Updates the state when the selected form changes
    /// and assigns the form to FormSelected
    /// </summary>
    /// <param name="e"></param>
    protected async void FormClicked(ChangeEventArgs e)
    {

        FormSelected = await FormService.GetFormAsync(e.Value.ToString());
        this.StateHasChanged();
    }

}