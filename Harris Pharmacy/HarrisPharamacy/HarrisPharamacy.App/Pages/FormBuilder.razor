@page "/formBuilder"

@using System.Net
@using HarrisPharmacy.App.Data
@using HarrisPharmacy.App.Data.Entities.Forms
@using HarrisPharmacy.App.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.Data.SqlClient
@inject IFormService FormService
@inject ApplicationDbContext Context

<h3>Create a new form</h3>
@if (Items != null) // CreateForm form
{
    <input @bind="@Name" type="text" placeholder="Form Name" />
    <br />
    <input type="text" placeholder="Form Description" @bind="@Description" />
    <br />
    @if (SelectedFormFields.Count != 0)
    {
        foreach (var field in SelectedFormFields)
        {
            <p>@field.FieldName </p>
        }
    }
    <h5>Add Additional fields</h5>
    <select class="custom-select" @onchange="UpdateItem">
        @foreach (var var in Items)
        {
            <option value=@var.Value>@var.Text</option>
        }
    </select>

    <button @onclick="@AddField" class="btn btn-warning">Add Field</button>

    <button @onclick="@CreateForm" class="btn btn-warning">Create Form</button>

}

@code {
    public List<FormField> FormFields;
    public List<FormField> SelectedFormFields = new List<FormField>();
    public List<SelectListItem> Items { get; set; } = null!;
    public SelectListItem Item { get; set; } = null!;

    private string Name { get; set; }
    private string Description { get; set; }

    /// <summary>
    /// Initializes the variables
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        Items = FormService.GetFormFieldsMultiSelectListAsync();
        FormFields = await FormService.GetFormFieldsAsync();
        Item = Items[0];
    }

    /// <summary>
    /// Updates the Item variable to be the selected item from the select input
    /// </summary>
    /// <param name="e"></param>
    protected void UpdateItem(ChangeEventArgs e)
    {
        Item = Items.FirstOrDefault(j => j.Value == e.Value.ToString());
    }

    /// <summary>
    /// Adds a field to the page
    /// </summary>
    protected void AddField()
    {
        var i = Items.FirstOrDefault(j => j.Value == Item.Value);
        if (i == null) return;
        SelectedFormFields.Add(FormFields.Find(f => f.FormFieldId == i.Value));
        this.StateHasChanged();
    }

    /// <summary>
    /// Inserts a new form into the db using form service
    /// </summary>
    /// <returns></returns>
    protected async Task CreateForm()
    {
        // The list of all the formsWithFields
        List<FormWithFields> formsWithFields = new List<FormWithFields>();

        // Create a new form
        Form form = new Form()
        {
            FormId = Guid.NewGuid().ToString(),
            Name = Name,
            Description = Description,
            DateCreated = DateTime.Now,
            DateUpdated = DateTime.Now,
        };

        // Create all the new FormWithFields
        foreach (var formField in SelectedFormFields)
        {

            var formWithFields = new FormWithFields()
            {
                FormWithFieldsId = Guid.NewGuid().ToString(),
                DateCreated = DateTime.Now,
                DateUpdated = DateTime.Now,
                Description = Description,
                Form = form,
                FormField = formField,
                FormId = form.FormId,
                FormFieldId = formField.FormFieldId
            };
            formsWithFields.Add(formWithFields);

            // TODO: Update formFields list with the FormWithFields Ids

        }

        // TODO: Save all to db
        Context.FormWithFields.AddRange(formsWithFields);
        await FormService.InsertFormAsync(form);
        ClearFields();
        await OnInitializedAsync();
    }

    /// <summary>
    /// Clears the fields
    /// </summary>
    protected void ClearFields()
    {
        Name = string.Empty;
        Description = string.Empty;
    }

}