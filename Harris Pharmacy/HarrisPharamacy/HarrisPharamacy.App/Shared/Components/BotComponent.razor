@*

   Harrison1 COSC 471 2019

   File = BotComponent.razor

   Author = Taylor Adam

   Date = 2020 - 01 - 10

   License = MIT

               Modification History

   Version     Author Date           Desc
   v 1.0		Taylor Adam     2020-01-20			Created

*@
@inject IJSRuntime JsRuntime
@using System.Net.Http.Headers
@using System.Text
@using HarrisPharmacy.App.Models
@using Newtonsoft.Json

<iframe src='https://webchat.botframework.com/embed/harrisapp-bot?s=a_iF8hZLzeg.ucrOTO61LOT1YtfR-mfLwts4dkVfp5UNfRluH2yhz6k' style='min-width: 300px; width: 100%; min-height: 500px;'></iframe>

<!--

<div id="webchat" role="main"></div>-->

@code {
   // this code is for using auth and direct line, couldn't get it to work but maybe in the future
   public ChatConfig chatConfig;

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {

      //   chatConfig = await GetChatConfig();
      //    await JsRuntime.InvokeAsync<object>("webChat", chatConfig.Token);

   }
   public async Task<ChatConfig> GetChatConfig()
   {
      var secret = "h_HVarww4aY.0QYBDvzG21lZGN4-czsO9w7XPLkgW9cTWAC_VvsULl0";
      HttpClient client = new HttpClient();
      HttpRequestMessage request = new HttpRequestMessage(
          HttpMethod.Post,
          $" https://directline.botframework.com/v3/directline/tokens/generate");

      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", secret);

      var userId = $"dl_{Guid.NewGuid()}";
      request.Content = new StringContent(
          JsonConvert.SerializeObject(
              new { User = new { Id = userId } }),
          Encoding.UTF8,
          "application/json");

      var response = await client.SendAsync(request);
      Console.Write(response.Content);
      string token = String.Empty;

      if (response.IsSuccessStatusCode)
      {
         var body = await response.Content.ReadAsStringAsync();
         token = JsonConvert.DeserializeObject<DirectLineToken>(body).token;
      }

      var config = new ChatConfig()
      {
         Token = token,
         UserId = Guid.NewGuid().ToString()
      };

      return config;
   }
   public class DirectLineToken
   {
      public string conversationId { get; set; }
      public string token { get; set; }
      public int expires_in { get; set; }
   }

   public class ChatConfig
   {
      public string Token { get; set; }
      public string UserId { get; set; }
   }
}