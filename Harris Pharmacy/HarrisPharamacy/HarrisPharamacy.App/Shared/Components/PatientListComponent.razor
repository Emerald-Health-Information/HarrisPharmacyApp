@*
    Harrison1 COSC 470 2019

    File = PatientInformation.razor

    Author = Grayson King

    Date = 2019-11-28

    License = MIT

    Modification History

    Version        Author            Date                    Desc
    v 1.0        Grayson King        2019-11-28            Added Headers
    v 1.1        Grayson King        2019-11-30            Refactor
    -->
*@
@using System.Net
@using HarrisPharmacy.App.Data
@using HarrisPharmacy.App.Data.Entities.Patients
@using HarrisPharmacy.App.Data.Entities.Appointments
@using HarrisPharmacy.App.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.Data.SqlClient
@using Microsoft.AspNetCore.Components.Web;
@inject IAppointmentService AppointmentService
@inject ApplicationDbContext Context
@inject NavigationManager navigationManager

@if (totalAppointments > 0)
{
    @for (var i = 0; i < totalAppointments; i++)
    {
        @if (i == 0)
        {
            <div class="active-patient-item">
                @{ AssignPatient(i); }
                @if (patient != null)
                {
                    <p>Patient Name: @patient.FirstName @patient.LastName</p>
                    <p>Location: @appointments.ElementAt(i).Location</p>
                    <p>Time: @appointments.ElementAt(i).StartTime - @appointments.ElementAt(i).EndTime</p>
                    <p>Description: @appointments.ElementAt(i).Description</p>
                    <button @onclick="@(e => GoToPatient(appointments.ElementAt(0).AppointmentId))">Access Appointment</button>
                    <button @onclick="@(e => SkipAppointment(appointments.ElementAt(0).AppointmentId))">Skip Appointment</button>
                }
            </div>
            <br />
        }
        else
        {
            <div class="inactive-patient-item">
                @{ AssignPatient(i); }
                @if (patient != null)
                {
                    <p>Patient Name: @patient.FirstName @patient.LastName</p>
                    <p>Location: @appointments.ElementAt(i).Location</p>
                    <p>Time: @appointments.ElementAt(i).StartTime - @appointments.ElementAt(i).EndTime</p>
                    <p>Description: @appointments.ElementAt(i).Description</p>
                    <button disabled>Access Appointment</button>
                    <button disabled>Skip Appointment</button>
                }
            </div>
            <br />
        }
    }
}
else
{
    <p><i>There are no appointments for @UserId.</i></p>
}

@code {
    [Parameter] public string UserId { get; set; }
    public static List<Appointment> appointments { get; set; }
    public int totalAppointments = 0;
    public Patient patient;
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        appointments = await AppointmentService.GetPatientListUserAsync(UserId);
        appointments.OrderBy(x => Convert.ToDateTime(x.StartTime));
        if (appointments != null)
        {
            totalAppointments = appointments.Count();
        }
    }
    /// <summary>
    /// Assigns current patient
    /// </summary>
    /// <param name="index"></param>
    protected void AssignPatient(int index)
    {
        patient = Context.Patients.Where(p => p.PatientId == appointments.ElementAt(index).PatientId).FirstOrDefault();
    }
    /// <summary>
    /// Goes to info page for the patient appointment
    /// </summary>
    /// <param name="pid"></param>
    protected void GoToPatient(string pid)
    {
        navigationManager.NavigateTo("patientinfo/" + pid);
        StateHasChanged();
    }
    /// <summary>
    /// Deletes an appointment without having to access the info page
    /// </summary>
    /// <param name="pid"></param>
    protected async void SkipAppointment(string pid)
    {
        await AppointmentService.DeleteAsync(pid);
        navigationManager.NavigateTo("/redirect/patients");
        StateHasChanged();
    }
}