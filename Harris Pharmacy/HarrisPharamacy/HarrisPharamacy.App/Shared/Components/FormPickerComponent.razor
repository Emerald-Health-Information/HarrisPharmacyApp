@*
    Harrison1 COSC 470 2019

    File = FormsPickerComponent.razor

    Author = TaylorAdam

    Date = 2019-11-19

    License = MIT

    Modification History

    Version		Author			Date				Desc
    v 1.0		Taylor Adam		2019-11-19			Added Headers
    v 1.1		Taylor Adam		2019-11-27          Turned the form page into this component
    -->
*@

@using System.Dynamic
@using System.Security.Claims
@using HarrisPharmacy.App.Models
@using HarrisPharmacy.Data.Entities.Forms
@using HarrisPharmacy.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject IFormService FormService

<p><b>Select Form</b></p>

@if (FormsList == null)
{
    <p><em>Loading...</em></p>
}
else if (FormsList.Count == 0)
{
    <p>No forms to display</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <select @onchange="@FormClicked" class="form-control">
                <option value="">-- Select Form --</option>
                @foreach (var form in FormsList)
                {
                    <option value="@form.FormId">@form.Name</option>
                }
            </select>
        </div>
    </div>
    @if (FormSelected != null)
    {
        <AuthorizeView>
            <Authorized>
                <FormComponent Form="FormSelected"
                               FormFieldsDictionary="FormFieldsDictionary"
                               UserId=@context.User.FindFirstValue(ClaimTypes.NameIdentifier)
                               PatientId=@PatientId />
            </Authorized>
        </AuthorizeView>

    }

}

@code {
    [Parameter]
    public string PatientId { get; set; }

    /// <summary>
    /// List of the forms
    //</summary>
    public List<Form> FormsList;
    /// <summary>
    /// Currently selected form
    ///</summary>
    public Form FormSelected;

    /// <summary>
    /// Keep a list of the fields and their values for form submission
    /// </summary>
    public List<FormFieldWithValueModel> FormFieldsDictionary;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    /// Gets the forms from the form services and assigns them to FormsList
    ///</summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FormsList = await FormService.GetFormsAsync();

    }
    /// <summary>
    /// Updates the state when the selected form changes
    /// and assigns the form to FormSelected
    ///</summary>
    /// <param name="e"></param>
    protected async void FormClicked(ChangeEventArgs e)
    {

        FormSelected = await FormService.GetFormAsync(e.Value.ToString());
        FormFieldsDictionary = new List<FormFieldWithValueModel>();
        this.StateHasChanged();
    }

}