@*
    Harrison1 COSC 470 2019

    File = FormComponent.razor

    Author = TaylorAdam

    Date = 2019-11-19

    License = MIT

    Modification History

    Version		Author			Date				Desc
    v 1.0		Taylor Adam		2019-11-19			Added Headers
    v 1.1		Taylor Adam		2019-11-27			Added different formatting depending on if the input is of type hour
    -->
*@

@using System.Dynamic
@using System.Security.Claims
@using HarrisPharmacy.Data.Entities.Forms
@using HarrisPharmacy.Data.Enums
@using HarrisPharmacy.Data.Services
@using HarrisPharmacy.App.Models;
@using HarrisPharmacy.Data.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.Data.SqlClient
@inject IFormService FormService

@foreach (var formWithFields in Form.FormWithFields)
{
    FormFieldsDictionary.Add(new FormFieldWithValueModel() { FormField = formWithFields.FormField });
}

@foreach (var formWithField in Form.FormWithFields)
{
    var field = formWithField.FormField;

    @if (field != null)
    {
        var formFieldWithValueModel = FormFieldsDictionary.Find(ff => ff.FormField == field);

        @*Checking if it's the hour type, there is probably a better way *@
        @if (Enum.Parse<FormInputType>(field.FormInputType.ToString()) == Enum.Parse<FormInputType>("Hour"))
        {
            <div class="form-group">
                <label class="col-form-label" for="@field.FieldName">@field.FieldName</label>
                <input @onchange="@((e) => UpdateItem(formFieldWithValueModel, e))" type="number" class="form-control mb-4" min="0" step="0.25" />
            </div>
        }
        else
        {
            <div class="form-group" style="padding-top: 10px">
                <label class="col-form-label" for="@field.FieldName">@field.FieldName</label>
                <input @onchange="@((e) => UpdateItem(formFieldWithValueModel, e))" class="form-control" type="@field.FormInputType" />
            </div>
        }
    }
}

<button type="button" @onclick="@SubmitForm" class="btn btn-primary">Submit</button>

@if (_showModal)
{
    <!--The modal TODO: Move to modal component, make it actually submit the form-->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Success</h3>
                    <button type="button" class="close" @onclick="@ToggleModal" data-dismiss="modal">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="p-1">Your form has been submitted successfully</div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-block btn-info" @onclick="@ToggleModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public string PatientId { get; set; }

    /// <summary>
    /// The form being displayed
    /// </summary>
    [Parameter]
    public Form Form { get; set; }
    /// <summary>
    /// Keep a list of the fields and their values for form submission
    /// </summary>
    [Parameter]
    public List<FormFieldWithValueModel> FormFieldsDictionary { get; set; }

    [Parameter]
    public string UserId { get; set; }

    /// <summary>
    /// the private backing field for showing the modal
    /// </summary>
    private bool _showModal = false;

    /// <summary>
    /// Toggles the modal on/off
    /// </summary>
    protected void ToggleModal()
    {
        _showModal = !_showModal;
    }

    /// <summary>
    /// Submits the form to the DB
    /// </summary>
    protected async Task SubmitForm()
    {
        Dictionary<FormField, string> dict = new Dictionary<FormField, string>();
        foreach (var entry in FormFieldsDictionary)
        {
            if (!dict.ContainsKey(entry.FormField))
                dict.Add(entry.FormField, entry.Value);
        }
        await FormService.SubmitFormAsync(Form, dict, UserId, PatientId);
        ToggleModal();
        StateHasChanged();
    }
    /// <summary>
    /// Updates the Item variable to be the selected item from the select input
    ///</summary>
    /// <param name="e"></param>
    protected async Task UpdateItem(FormFieldWithValueModel formFieldWithValueModel, ChangeEventArgs e)
    {

        formFieldWithValueModel.Value = e.Value.ToString();
    }
}